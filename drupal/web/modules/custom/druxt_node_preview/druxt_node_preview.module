<?php

/**
 * @file
 * Core functions for the Druxt: Node Preview module.
 */

use Drupal\Core\Form\FormStateInterface;

 /**
  * Implements hook_theme().
  */
function druxt_node_preview_theme($existing, $type, $theme, $path) {
  return [
    'druxt_node_preview' => [
      'variables' => [
        'frontend' => NULL,
        'jsonapi_node_preview' => NULL,
        'url' => NULL,
        'view_mode_id' => NULL
      ]
    ]
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function druxt_node_preview_form_node_preview_form_select_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  // Get frontend from request.
  $frontends = druxt_node_preview_frontends();
  $frontend = \Drupal::request()->query->get('frontend');
  // Otherwise use the first available frontend.
  if (!$frontend) {
    $frontend = 0;
  }

  // Add Preview frontend option.
  $form['frontend'] = [
    '#type' => 'select',
    '#title' => t('Frontend'),
    '#options' => array_keys($frontends),
    '#default_value' => $frontend,
    '#attributes' => [
      'data-drupal-autosubmit' => TRUE,
    ],
  ];

  // Adjust weights.
  $form['view_mode']['#weight'] = 1;
  $form['submit']['#weight'] = 2;


  // Replace submit handler.
  $form['#submit'] = ['druxt_node_preview_form_node_preview_form_select_submit'];
}

function druxt_node_preview_form_node_preview_form_select_submit(array &$form, FormStateInterface $form_state) {
  $route_parameters = [
    'frontend' => $form_state->getValue('frontend'),
    'node_preview' => $form_state->getValue('uuid'),
    'view_mode_id' => $form_state->getValue('view_mode'),
  ];

  $options = [];
  $query = \Drupal::request()->query;
  if ($query->has('destination')) {
    $options['query']['destination'] = $query->get('destination');
    $query->remove('destination');
  }
  $form_state->setRedirect('entity.node.preview', $route_parameters, $options);
}

/**
 * Return available preview frontends.
 */
function druxt_node_preview_frontends() {
  $options = [];
  $config = \Drupal::config('druxt_node_preview.settings');

  // Extract allowed values.
  $list = explode("\n", $config->get('frontends'));
  $list = array_map('trim', $list);
  $list = array_filter($list, 'strlen');
  foreach ($list as $item) {
    // Check for an explicit key.
    $matches = [];
    if (preg_match('/(.*)\|(.*)/', $item, $matches)) {
      // Trim url and label to avoid unwanted spaces issues.
      $label = trim($matches[1]);
      $url = trim($matches[2]);
    }
    // Otherwise we use the value as the key.
    else {
      $label = $url = $item;
    }
    $options[$label] = $url;
  }

  return $options;
}
